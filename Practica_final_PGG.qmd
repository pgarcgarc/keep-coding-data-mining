---
title: "practica_final"
format: html
editor: visual
---

Vamos a utilizar el dataset de semillas que se encuentra aquí: https://archive.ics.uci.edu/ml/datasets/seeds#

Primero vamos a descargarnos el dataset con el siguiente comando:

```{r}
library(tidyverse)
df_seeds <- read.table('https://archive.ics.uci.edu/ml/machine-learning-databases/00236/seeds_dataset.txt', col.names =c('area','perimetro','compacto','longitud','anchura','coeficient.asimetria','longitud.ranura','tipo'))
```

#### PREGUNTA 1 (0.5pt)

¿Cuantas filas y cuantas columnas tiene el dataframe df_seeds?

**Respuesta**:

```{r}
paste("El dataframe df_seeds tiene ",nrow(df_seeds), "filas y ", ncol(df_seeds), "columnas")
```

#### PREGUNTA 2 (0.5pt)

Vamos a convertir en factor la columna tipo. Vamos a reemplazar los números por su correspondiente etiqueta (label). La correspondencia entre el código y el tipo es:

-   1 - Kama
-   2 - Rosa
-   3 - Canadian

Convierte en factor la columna tipo, respetando las etiquetas:

**Respuesta**:

```{r}
mi_factor <- factor(df_seeds$tipo, labels = c("Kama", "Rosa", "Canadian"))
#mi_factor

df_seeds$tipo <- as.character.factor(mi_factor)
#head(df_seeds)
#mutate

```

#### PREGUNTA 3 (1pt)

¿Cual es la media del area de cada uno de los tipos?

**Respuesta**

```{r}
df_media_area_tipo <- df_seeds |> group_by(tipo) |> 
  summarise(media_area=sum(mean(area)))
df_media_area_tipo


```

```{r}
paste("La media del área del tipo", df_media_area_tipo[1,1], "es:", df_media_area_tipo[1,2])
paste('La media del área del tipo', df_media_area_tipo[2,1], 'es:', df_media_area_tipo[2,2])
paste('La media del área del tipo', df_media_area_tipo[3,1], 'es:', df_media_area_tipo[3,2])
```

#### PREGUNTA 4 (0.5pt)

¿Como se llama el siguiente tipo de gráfico?. ¿Qué representa la línea del centro de la caja?

```{r}
ggplot(df_seeds, aes(x=tipo, y=area)) + geom_boxplot()

```

**Respuesta**:

El gráfico se llama 'Diagrama de cajas'. La línea del centro de cada caja representa la mediana del área por tipo.

#### PREGUNTA 5 (1.5pt)

¿Como pintarías un diagrama de puntos (o scatterplot) con ggplot con las siguientes características? - En el eje X la variable compacto - En el eje Y la variable area - Cada tipo de semilla debería tener un color diferente

**Respuesta**:

```{r}
ggplot(df_seeds, aes(x=compacto, y=area)) + geom_point(aes(color=tipo))

```

#### PREGUNTA 6 (0.5pt)

¿Qué hace la siguiente línea?:

```{r}
df_seeds |> mutate(is_kama = tipo=='Kama') -> df_seeds

```

**Respuesta**:

Crea una nueva variable en el dataframe df_seeds de tipo Boolean llamada is_kama con valor TRUE donde la variable Tipo sea igual a Kama y FALSE para cualquier otro valor de la variable Tipo

#### PREGUNTA 7 (1.5pt)

Vamos a dividir el conjunto de datos en test y training porque vamos a entrenar un modelo que me permita diferenciar si una semilla es de tipo Kama o no. ¿Por qué es aconsejable dividir el dataset en los grupos de train y test?

```{r}
set.seed(123) 
idx <- sample(1:nrow(df_seeds), 0.7*nrow(df_seeds))
df_seeds_train <- df_seeds[idx,]
df_seeds_test <- df_seeds[-idx,]
```

**Respuesta**:

Dividir el conjunto de datos en conjuntos de entrenamiento y prueba es esencial en el proceso de construcción y evaluación de modelos. Algunas razones clave por las que es aconsejable hacerlo:

1.  Evaluación del rendimiento del modelo: Al reservar una porción de los datos para el conjunto de prueba, se puede evaluar el rendimiento del modelo en datos que no ha visto durante el entrenamiento. Esto proporciona una medida más realista de cómo se generaliza el modelo a datos no vistos, lo que es fundamental para determinar su utilidad en situaciones del mundo real.

2.  Prevención de sobreajuste (overfitting): El sobreajuste ocurre cuando un modelo aprende los detalles específicos de los datos de entrenamiento en lugar de patrones generales que se pueden aplicar a nuevos datos. Dividir los datos en conjuntos de entrenamiento y prueba ayuda a identificar si el modelo está sobreajustando, ya que su rendimiento en el conjunto de prueba puede indicar si está generalizando bien o no.

3.  Selección de modelos y ajuste de hiperparámetros: Al usar el conjunto de entrenamiento para entrenar varios modelos y ajustar sus hiperparámetros, se puede comparar su rendimiento en el conjunto de prueba para seleccionar el mejor modelo y configuración. Esto ayuda a evitar la elección de modelos que se desempeñen bien solo en los datos de entrenamiento pero no generalicen bien a nuevos datos.

4.  Validación cruzada: Dividir los datos en conjuntos de entrenamiento y prueba es fundamental para técnicas de validación cruzada, como la validación cruzada k-fold, que ayuda a estimar el rendimiento del modelo de manera más robusta al promediar el rendimiento en diferentes particiones de los datos.

#### PREGUNTA 8 (1pt)

Vamos a crear un modelo para realizar una clasificación binaria, donde le pasaremos como entrada las columnas: area, perimetro, compacto, longitud, coeficient.asimetria y longitud.ranura

¿Qué tipo de algoritmo o modelo debería usar?

**Respuesta**:

Regresión Logística

#### PREGUNTA 9 (1pt)

Crea un modelo que me permita clasificar si una semilla es de tipo Kama o no con las siguientes columnas: area, perimetro, compacto, longitud, coeficient.asimetria, longitud.ranura

**Respuesta**:

```{r}
df_seeds$tipo.n[df_seeds$is_kama == TRUE] <- 'Kama'
df_seeds$tipo.n[df_seeds$is_kama == FALSE] <- 'No_Kama'
df_seeds$tipo.n <- as.factor(df_seeds$tipo.n)
df_seeds$tipo.n
#head(df_seeds)

set.seed(123) 
idx <- sample(1:nrow(df_seeds), 0.7*nrow(df_seeds))
df_seeds_train <- df_seeds[idx,]
df_seeds_test <- df_seeds[-idx,]

model <- glm(data = df_seeds_train, formula = tipo.n ~ area + perimetro + compacto + longitud + coeficient.asimetria + longitud.ranura, family=binomial) 
```

#### PREGUNTA 10 (1pt)

Si usamos un umbral de 0 en la salida del modelo (lo que equivale a probabilidad de 0.5 cuando usamos el predict con type='response') ¿Cuales son los valores de precisión y exhausitividad?

**Respuesta**.

```{r}
cf <- caret::confusionMatrix(data=factor(predict(model,df_seeds_test)>0, labels=c('Kama','No_Kama') ), reference=df_seeds_test$tipo.n )
#cf

paste0("Su precisión es: ", cf$byClass['Specificity']*100,"%")
paste0("Su exhausitividad es: ", cf$byClass['Sensitivity']*100,"%")

#summary(model)
#cf$overall
#betalog <- model$coefficients
#betalog
```

#### PREGUNTA 11 (1.5pt)

¿Qué están haciendo las siguientes líneas?

```{r}
set.seed(123)
cl<-df_seeds |> select(area,perimetro,compacto,longitud,anchura,coeficient.asimetria,longitud.ranura) |> kmeans(3)
table(real=df_seeds$tipo,cluster=cl$cluster)
```

**Respuesta**:

set.seed(123) inicializa la semilla del generador de números aleatorios en un valor específico.

Esto es útil para la reproducibilidad de los resultados cuando se utilizan funciones que generan números aleatorios. Al fijar la semilla del generador de números aleatorios, se asegura que los resultados sean los mismos en diferentes ejecuciones del código, siempre que la misma semilla se utilice.

En la siguiente parte del código:

df_seeds: Es el dataframe que contiene los datos de las semillas.

select(area, perimetro, compacto, longitud, anchura, coeficient.asimetria, longitud.ranura): Esta parte del código selecciona las columnas especificadas del dataframe df_seeds, que son 'area', 'perimetro', 'compacto', 'longitud', 'anchura', 'coeficient.asimetria' y 'longitud.ranura'. Estas columnas son las características que se utilizarán para realizar el clustering con el algoritmo k-means.

kmeans(3): Esta función aplica el algoritmo k-means al conjunto de datos seleccionado. El argumento 3 indica que se desean tres grupos (o clusters) como resultado del algoritmo. El algoritmo k-means agrupa los puntos de datos en k grupos basados en sus características, de modo que los puntos dentro de un mismo grupo sean más similares entre sí que con los puntos de otros grupos. En este caso, se están agrupando las semillas en tres grupos basados en las características seleccionadas.

En la última parte del código, la tabla resultante mostrará cuántas observaciones pertenecen a cada combinación de tipo de semilla y cluster.
